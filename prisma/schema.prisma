// Networth Finance Coach - Database Schema
// Production-ready structure for user data and dynamic content

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id        String   @id @default(cuid())
  whopId    String   @unique // Whop user ID
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  goal              UserGoal?
  budgets           Budget[]
  bills             Bill[]
  debts             Debt[]
  netWorthSnapshots NetWorthSnapshot[]
  progressHistory   ProgressHistory[]
  bankConnections   BankConnection[]
  transactions      Transaction[]
  streaks           Streak[]
  widgets           Widget[]
  guiltyPleasures   GuiltyPleasure[]
  notifications     Notification[]
  achievements      Achievement[]

  @@index([whopId])
}

// ============================================
// USER FINANCIAL DATA
// ============================================

model UserGoal {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Goal details
  type          String   // 'house', 'travel', 'family', 'wedding', 'investment', 'other'
  customGoal    String?  // Custom goal description
  targetAmount  Float
  currentSavings Float   @default(0)
  timeframe     Int      // Years

  // User profile
  region        String   // 'US', 'UK', 'EU'
  currency      String   // 'USD', 'GBP', 'EUR'
  monthlyBudget Float?

  // Preferences
  spendingCategories String[] // Array of spending categories

  // Onboarding
  onboardingComplete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ProgressHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount    Float
  note      String?
  milestone Int?     // Percentage milestone reached (25, 50, 75, 100)

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

// ============================================
// BUDGET TRACKING
// ============================================

model Budget {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Budget period
  month     Int      // 1-12
  year      Int

  // Categories with allocated budgets
  categories Json    // { "Food": { budgeted: 500, spent: 350 }, ... }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenses  Expense[]

  @@unique([userId, month, year])
  @@index([userId, year, month])
}

model Expense {
  id        String   @id @default(cuid())
  budgetId  String
  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  category  String
  amount    Float
  description String?
  date      DateTime @default(now())

  createdAt DateTime @default(now())

  @@index([budgetId, date])
}

// ============================================
// BILLS & REMINDERS
// ============================================

model Bill {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  category  String   // 'Rent', 'Utilities', 'Subscriptions', etc.
  amount    Float
  dueDate   Int      // Day of month (1-31)

  recurring Boolean  @default(true)
  paid      Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, dueDate])
}

// ============================================
// DEBT MANAGEMENT
// ============================================

model Debt {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name            String
  type            String   // 'Credit Card', 'Student Loan', 'Personal Loan', etc.
  balance         Float
  interestRate    Float    // Annual rate as decimal (0.20 = 20%)
  minimumPayment  Float

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

// ============================================
// NET WORTH TRACKING
// ============================================

model NetWorthSnapshot {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Assets
  savings     Float @default(0)
  investments Float @default(0)
  property    Float @default(0)
  other       Float @default(0)

  // Liabilities
  loans       Float @default(0)
  creditCards Float @default(0)
  otherDebts  Float @default(0)

  // Calculated
  totalAssets      Float
  totalLiabilities Float
  netWorth         Float

  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@index([userId, date])
}

// ============================================
// DYNAMIC CONTENT (CMS)
// ============================================

model CreditTip {
  id          String   @id @default(cuid())

  region      String   // 'US', 'UK', 'EU', 'ALL'
  category    String   // 'building_credit', 'maintaining_score', 'repairing_credit'
  tipText     String   @db.Text
  importance  Int      @default(0) // Higher = shown first

  active      Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([region, category, active, importance])
}

model Article {
  id          String   @id @default(cuid())

  slug        String   @unique
  title       String
  excerpt     String?  @db.Text
  content     String   @db.Text

  category    String   // 'credit', 'budgeting', 'investing', 'debt', etc.
  region      String?  // Optional region targeting

  featured    Boolean  @default(false)
  published   Boolean  @default(false)

  // SEO
  metaTitle       String?
  metaDescription String?

  // Stats
  views       Int      @default(0)

  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([published, category])
  @@index([slug])
}

model FAQ {
  id        String   @id @default(cuid())

  question  String
  answer    String   @db.Text
  category  String   // 'credit', 'budgeting', 'app', etc.
  region    String?  // Optional region targeting
  order     Int      @default(0) // Display order

  active    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([active, category, order])
}

// ============================================
// GOAL TEMPLATES (Dynamic)
// ============================================

model GoalTemplate {
  id              String   @id @default(cuid())

  name            String
  description     String   @db.Text
  icon            String
  category        String   // 'Security', 'Education', 'Lifestyle', etc.

  // Default amounts by region (stored as JSON)
  defaultAmounts  Json     // { "US": 5000, "UK": 4000, "EU": 4500 }
  defaultTimeframe Float   @default(1)

  tips            String[] // Array of tips

  active          Boolean  @default(true)
  order           Int      @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([active, category, order])
}

// ============================================
// VECTOR SEARCH / RAG KNOWLEDGE BASE
// ============================================

model KnowledgeBase {
  id          String   @id @default(cuid())

  // Content
  content     String   @db.Text // The text that was embedded
  title       String?  // Optional title for display

  // Metadata
  contentType String   // 'credit_tip', 'faq', 'article', 'guide'
  category    String   // Content category
  region      String?  // Optional region targeting

  // Reference to original content
  sourceId    String?  // ID of original CreditTip/FAQ/Article

  // Vector embedding (stored as JSON array of floats)
  embedding   Json?    // [0.123, -0.456, ...] 1536 dimensions for text-embedding-3-small

  // Search optimization
  keywords    String[] // Extracted keywords for hybrid search
  importance  Int      @default(0) // Boost certain content in search results

  active      Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([contentType, category, active])
  @@index([active, importance])
}

// ============================================
// BANKING INTEGRATION (Open Banking API)
// ============================================

model BankConnection {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Banking provider details
  provider        String   // 'truelayer', 'plaid', 'mock'
  providerAccountId String @unique // Provider's account ID

  // Account information
  accountName     String
  accountType     String   // 'checking', 'savings', 'credit_card'
  currency        String   @default("GBP")

  // Balance (cached from API)
  currentBalance  Float    @default(0)
  availableBalance Float   @default(0)

  // Connection status
  isActive        Boolean  @default(true)
  lastSynced      DateTime?

  // Access tokens (encrypted)
  accessToken     String?  @db.Text // Encrypted
  refreshToken    String?  @db.Text // Encrypted
  tokenExpiresAt  DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  transactions    Transaction[]

  @@index([userId, isActive])
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  bankConnectionId String?
  bankConnection  BankConnection? @relation(fields: [bankConnectionId], references: [id], onDelete: SetNull)

  // Transaction details
  amount          Float
  currency        String   @default("GBP")
  description     String
  merchantName    String?

  // Categorization
  category        String   // Auto-categorized or manual
  isRecurring     Boolean  @default(false)

  // Type
  type            String   // 'debit', 'credit'

  // Dates
  transactionDate DateTime
  postedDate      DateTime?

  // Provider details
  providerTransactionId String? @unique

  // Smart features
  isGuiltyPleasure Boolean @default(false)
  guiltyPleasureId String?
  guiltyPleasure   GuiltyPleasure? @relation(fields: [guiltyPleasureId], references: [id], onDelete: SetNull)

  createdAt       DateTime @default(now())

  @@index([userId, transactionDate])
  @@index([category, transactionDate])
  @@index([providerTransactionId])
}

// ============================================
// GUILTY PLEASURES FEATURE
// ============================================

model GuiltyPleasure {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Pleasure details
  name            String   // e.g., "Barista Coffee", "Takeout"
  category        String   // Spending category
  icon            String?  // Emoji or icon name

  // Budget allowance
  monthlyBudget   Float    // How much they can spend guilt-free
  spent           Float    @default(0) // Current month spending

  // Merchants (for auto-categorization)
  merchants       String[] // Array of merchant names to match

  // Tracking
  isActive        Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  transactions    Transaction[]

  @@index([userId, isActive])
}

// ============================================
// STREAKS & GAMIFICATION
// ============================================

model Streak {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Streak type
  type            String   // 'daily_check', 'savings_deposit', 'budget_adherence', 'debt_payment'

  // Tracking
  currentStreak   Int      @default(0) // Days
  longestStreak   Int      @default(0)
  lastActivity    DateTime?

  // Sharing
  isShared        Boolean  @default(false)

  // Milestones reached
  milestonesReached Json   // { "7": true, "30": true, "100": false }

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, type])
  @@index([userId, currentStreak])
}

// ============================================
// PERSONALIZED WIDGETS
// ============================================

model Widget {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Widget configuration
  widgetType      String   // 'net_worth', 'savings_progress', 'streak', 'guilty_pleasure', 'bills_due'
  position        Int      @default(0) // Display order

  // Display settings
  isVisible       Boolean  @default(true)
  size            String   @default("medium") // 'small', 'medium', 'large'

  // Custom configuration (JSON)
  config          Json?    // Widget-specific settings

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, position])
}

// ============================================
// SMART NOTIFICATIONS
// ============================================

model Notification {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification details
  type            String   // 'streak', 'bill_reminder', 'overspending', 'suggestion', 'milestone'
  title           String
  message         String   @db.Text

  // Action (optional)
  actionLabel     String?
  actionUrl       String?

  // Priority & display
  priority        String   @default("normal") // 'low', 'normal', 'high', 'urgent'
  category        String   // 'achievement', 'warning', 'info', 'tip'

  // Status
  isRead          Boolean  @default(false)
  sentAt          DateTime @default(now())
  readAt          DateTime?

  createdAt       DateTime @default(now())

  @@index([userId, isRead, sentAt])
  @@index([userId, type])
}

// ============================================
// SPENDING PATTERNS & SUGGESTIONS
// ============================================

model SpendingPattern {
  id              String   @id @default(cuid())
  userId          String

  // Pattern details
  patternType     String   // 'recurring_subscription', 'overspending', 'unusual_activity', 'savings_opportunity'
  category        String

  // Detected pattern
  description     String   @db.Text
  amount          Float?
  frequency       String?  // 'daily', 'weekly', 'monthly'

  // Confidence & impact
  confidence      Float    @default(0.5) // 0.0 - 1.0
  potentialSavings Float   @default(0)

  // Suggestion
  suggestion      String?  @db.Text
  suggestionType  String?  // 'switch_provider', 'reduce_frequency', 'cancel_subscription', 'set_limit'

  // Status
  status          String   @default("active") // 'active', 'dismissed', 'actioned'
  userFeedback    String?  // 'helpful', 'not_helpful', 'wrong'

  // Dates
  detectedAt      DateTime @default(now())
  firstSeen       DateTime
  lastSeen        DateTime

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, status, confidence])
  @@index([patternType, status])
}

model SmartSuggestion {
  id              String   @id @default(cuid())
  userId          String

  // Suggestion details
  suggestionType  String   // 'better_savings_rate', 'credit_card_points', 'reduce_spending', 'automate_savings'
  title           String
  description     String   @db.Text

  // Financial impact
  potentialSavings Float?
  timeframe       String?  // 'monthly', 'annually'

  // Priority
  priority        Int      @default(0) // Higher = more important
  relevanceScore  Float    @default(0.5) // Based on user's goals

  // Product recommendations (for "two for one deals")
  productType     String?  // 'savings_account', 'credit_card', 'investment'
  productDetails  Json?    // Product info, rates, benefits

  // Status
  status          String   @default("new") // 'new', 'viewed', 'actioned', 'dismissed'
  userFeedback    String?

  // Display
  imageUrl        String?
  actionLabel     String?
  actionUrl       String?

  expiresAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, status, priority])
  @@index([suggestionType, status])
}

// ============================================
// PEER COMPARISON & SOCIAL FEATURES
// ============================================

model PeerMetric {
  id              String   @id @default(cuid())

  // Aggregation scope
  goalType        String   // 'house', 'travel', 'family', etc.
  region          String   // 'US', 'UK', 'EU'
  timeframe       Int      // Years

  // Aggregated metrics (calculated weekly)
  averageSavings  Float
  medianSavings   Float
  averageProgress Float    // Percentage

  // Percentile breakpoints
  percentile25    Float
  percentile50    Float
  percentile75    Float
  percentile90    Float

  // Sample size
  userCount       Int      // Number of users in this cohort

  // Stats for benchmarking
  averageMonthlyDeposit Float
  averageTimeToGoal     Float?   // Months
  successRate           Float?   // % who reached goal

  // Snapshot date
  calculatedAt    DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([goalType, region, timeframe])
  @@index([calculatedAt])
}

model Achievement {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Achievement details
  type            String   // 'streak_milestone', 'savings_goal', 'debt_paid', 'first_investment', 'budget_master'
  title           String
  description     String   @db.Text

  // Visual
  icon            String   // Emoji or icon name
  color           String   @default("#10b981") // Badge color

  // Achievement value (for sorting/display)
  value           Float?   // e.g., streak days, amount saved

  // Sharing
  isShareable     Boolean  @default(true)
  isShared        Boolean  @default(false)
  sharedAt        DateTime?

  // Milestone tracking
  milestone       String?  // '7_day_streak', '1000_saved', etc.

  earnedAt        DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([userId, earnedAt])
  @@index([isShared, sharedAt])
  @@index([type, isShared])
}

model UserAchievementShare {
  id              String   @id @default(cuid())
  userId          String

  // Sharing preferences
  shareStreaks    Boolean  @default(true)
  shareSavings    Boolean  @default(true)
  shareDebtPayoff Boolean  @default(true)
  shareMilestones Boolean  @default(true)

  // Privacy settings
  anonymousSharing Boolean @default(false) // Share without name/details
  allowLeaderboard Boolean @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId])
}

// ============================================
// NEWS & INFORMATION DECIPHERING
// ============================================

model NewsImpact {
  id              String   @id @default(cuid())

  // News details
  title           String
  summary         String   @db.Text
  source          String?  // 'Bank of England', 'Government', etc.
  category        String   // 'interest_rates', 'policy', 'markets', 'products'

  // Relevance
  region          String?  // Target region
  affectsGoalTypes String[] // Which goal types this impacts

  // Impact type
  impactType      String   // 'positive', 'negative', 'neutral', 'action_required'
  urgency         String   @default("normal") // 'low', 'normal', 'high', 'urgent'

  // Content
  fullContent     String?  @db.Text
  sourceUrl       String?
  imageUrl        String?

  // Quick actions
  hasQuickAction  Boolean  @default(false)
  actionLabel     String?
  actionUrl       String?
  actionType      String?  // 'switch_account', 'apply_product', 'adjust_goal'

  // Dates
  publishedAt     DateTime @default(now())
  expiresAt       DateTime? // For time-sensitive news

  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category, region, active, publishedAt])
  @@index([affectsGoalTypes])
}

model UserNewsImpact {
  id              String   @id @default(cuid())
  userId          String
  newsImpactId    String

  // Personalized impact calculation
  personalizedImpact String @db.Text // Claude-generated explanation
  impactAmount    Float?   // Calculated financial impact (e.g., "£50 more per year")

  // Status
  viewed          Boolean  @default(false)
  actionTaken     Boolean  @default(false)
  dismissed       Boolean  @default(false)

  viewedAt        DateTime?
  createdAt       DateTime @default(now())

  @@unique([userId, newsImpactId])
  @@index([userId, viewed])
}

// ============================================
// BEHAVIORAL INTERVENTIONS
// ============================================

model InterventionTrigger {
  id              String   @id @default(cuid())

  // Trigger definition
  triggerType     String   // 'overspending', 'missed_savings', 'debt_increase', 'unusual_spend'
  category        String?  // Spending category (if applicable)

  // Conditions
  threshold       Float?   // e.g., 1.2 for 20% overspend
  consecutive     Int      @default(1) // How many periods to trigger

  // Intervention message
  title           String
  message         String   @db.Text
  severity        String   // 'info', 'warning', 'urgent'

  // Suggestions
  suggestedAction String?  @db.Text
  alternativeOptions String[] // Array of alternative behaviors

  // Display
  icon            String?
  color           String?

  active          Boolean  @default(true)
  priority        Int      @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([triggerType, active])
}

model InterventionHistory {
  id              String   @id @default(cuid())
  userId          String
  triggerId       String

  // Context when triggered
  contextData     Json     // Details about what triggered it
  calculatedImpact Float?  // e.g., "You'd save £100/month"

  // User response
  viewed          Boolean  @default(false)
  actionTaken     Boolean  @default(false)
  dismissed       Boolean  @default(false)
  feedback        String?  // 'helpful', 'not_helpful', 'annoying'

  viewedAt        DateTime?
  actionTakenAt   DateTime?
  triggeredAt     DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([userId, triggeredAt])
  @@index([triggerId, actionTaken])
}

// ============================================
// FINANCIAL PRODUCTS DATABASE
// ============================================

model FinancialProduct {
  id              String   @id @default(cuid())

  // Product details
  name            String
  provider        String
  productType     String   // 'savings_account', 'credit_card', 'isa', 'investment_platform'
  region          String   // 'US', 'UK', 'EU'

  // Rates & fees
  interestRate    Float?   // For savings/debt products
  apr             Float?   // For credit products
  fees            Json?    // Various fees structure

  // Key features
  description     String   @db.Text
  keyFeatures     String[] // Bullet points

  // Dual benefits (research finding: "two for one deals")
  primaryBenefit  String   // e.g., "High interest rate"
  secondaryBenefit String  // e.g., "Builds credit score"

  // Eligibility
  minDeposit      Float?
  minIncome       Float?
  minCreditScore  Int?
  eligibilityNotes String? @db.Text

  // Links & actions
  applicationUrl  String?
  imageUrl        String?
  logoUrl         String?

  // Categorization for matching
  suitableForGoals String[] // 'house', 'travel', etc.
  riskLevel       String?   // 'low', 'medium', 'high' for investments

  // Display
  featured        Boolean  @default(false)
  priority        Int      @default(0)
  active          Boolean  @default(true)

  // Stats
  clickCount      Int      @default(0)
  applicationCount Int     @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([productType, region, active])
  @@index([suitableForGoals, active, priority])
}

model ProductRecommendation {
  id              String   @id @default(cuid())
  userId          String
  productId       String

  // Matching score
  relevanceScore  Float    // 0.0 - 1.0
  matchReason     String   @db.Text // Why this product matches

  // Calculated impact
  potentialBenefit Float?  // Financial benefit
  timeToGoal      Float?   // How much faster they'd reach goal

  // User interaction
  viewed          Boolean  @default(false)
  clicked         Boolean  @default(false)
  applied         Boolean  @default(false)

  viewedAt        DateTime?
  appliedAt       DateTime?
  recommendedAt   DateTime @default(now())
  createdAt       DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId, relevanceScore])
  @@index([productId, applied])
}

// ============================================
// INVESTMENT EDUCATION
// ============================================

model InvestmentProfile {
  id              String   @id @default(cuid())
  userId          String   @unique

  // Risk assessment
  riskTolerance   String   // 'conservative', 'moderate', 'aggressive'
  investmentGoals String[] // 'growth', 'income', 'preservation'
  timeHorizon     Int      // Years

  // Quiz results
  quizScore       Int?
  quizAnswers     Json?    // Store quiz responses

  // Experience
  hasInvested     Boolean  @default(false)
  investmentTypes String[] // 'stocks', 'bonds', 'etf', 'crypto'

  // Preferences
  monthlyInvestment Float?
  preferredPlatforms String[] // 'Vanguard', 'Fidelity', etc.

  // Education progress
  modulesCompleted String[]
  lastEducationAt DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([riskTolerance])
}

// ============================================
// SUCCESS STORIES / ROLE MODELS
// ============================================

model SuccessStory {
  id              String   @id @default(cuid())

  // Person details
  name            String
  age             Int?
  occupation      String?
  region          String   // US, CA, UK, EU

  // Achievement
  goalType        String   // 'emergency_fund', 'house', 'debt_free', 'travel', 'car'
  goalTitle       String   // Short title like "Saved $10k in 18 months"
  startingPoint   String   @db.Text // Where they started
  achievement     String   @db.Text // What they accomplished

  // Financial details
  amountSaved     Float?
  timeframe       Int      // Months
  monthlyContribution Float?

  // Story
  story           String   @db.Text // Their full narrative
  challenges      String[] // Obstacles they faced
  strategies      String[] // What worked for them
  keyTakeaway     String   @db.Text // Main lesson

  // Metadata
  featured        Boolean  @default(false)
  verified        Boolean  @default(true)
  inspirationScore Int     @default(0) // 0-100, how inspiring/relatable

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([goalType, region, featured])
  @@index([featured, inspirationScore])
}
